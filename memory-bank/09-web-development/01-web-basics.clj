;; 09-web-development/01-web-basics.clj
;; Clojure Web Development - Building web applications
;; 
;; Memory Note: Clojure has excellent web development libraries
;; Ring and Compojure are the foundation of most web apps

(ns memory-bank.web.basics
  "Introduction to web development with Clojure")

;; =============================================================================
;; RING - THE FOUNDATION
;; =============================================================================

;; Ring is the foundational web library for Clojure
;; Based on simple concepts: requests and responses are maps

;; A Ring handler is just a function: request-map -> response-map
(defn hello-handler [request]
  {:status 200
   :headers {"Content-Type" "text/html"}
   :body "<h1>Hello, World!</h1>"})

;; Memory Tip: Everything is data - requests and responses are just maps

;; =============================================================================
;; REQUEST AND RESPONSE MAPS
;; =============================================================================

;; Example request map:
(def example-request
  {:request-method :get
   :uri "/users/123"
   :query-string "format=json"
   :headers {"accept" "application/json"
             "user-agent" "Mozilla/5.0..."}
   :body nil})

;; Example response map:
(def example-response
  {:status 200
   :headers {"Content-Type" "application/json"}
   :body "{\"id\": 123, \"name\": \"Alice\"}"})

;; =============================================================================
;; COMPOJURE - ROUTING
;; =============================================================================

;; Compojure provides routing on top of Ring
;; Add to deps.edn: compojure/compojure {:mvn/version "1.7.0"}

;; (require '[compojure.core :refer :all]
;;          '[compojure.route :as route])

;; (defroutes app-routes
;;   (GET "/" [] "Welcome to our app!")
;;   (GET "/users/:id" [id] (str "User ID: " id))
;;   (POST "/users" [name email] 
;;     (str "Creating user: " name " with email: " email))
;;   (route/not-found "Page not found"))

;; Memory Tip: Routes are just functions that match patterns

;; =============================================================================
;; MIDDLEWARE
;; =============================================================================

;; Middleware wraps handlers to add functionality
;; Common pattern: middleware is a function that takes a handler and returns a handler

(defn wrap-logging [handler]
  (fn [request]
    (println "Request:" (:request-method request) (:uri request))
    (let [response (handler request)]
      (println "Response status:" (:status response))
      response)))

;; Usage: (wrap-logging hello-handler)

;; Common middleware:
;; - wrap-json-body: Parse JSON request bodies
;; - wrap-json-response: Convert response maps to JSON
;; - wrap-session: Session handling
;; - wrap-cors: Cross-origin requests

;; =============================================================================
;; HICCUP - HTML GENERATION
;; =============================================================================

;; Hiccup generates HTML from Clojure data structures
;; Add to deps.edn: hiccup/hiccup {:mvn/version "1.0.5"}

;; (require '[hiccup.core :refer [html]])
;; (require '[hiccup.page :refer [html5]])

;; (html [:div.container
;;        [:h1 "Welcome"]
;;        [:p "This is generated by Hiccup"]])

;; Full page:
;; (html5
;;   [:head [:title "My App"]]
;;   [:body
;;    [:div.container
;;     [:h1 "Hello World"]]])

;; Memory Tip: HTML as data - vectors become tags, maps become attributes

;; =============================================================================
;; JSON API EXAMPLE
;; =============================================================================

;; Example JSON API handler
(defn users-api [request]
  (case (:request-method request)
    :get {:status 200
          :headers {"Content-Type" "application/json"}
          :body "[{\"id\": 1, \"name\": \"Alice\"}, {\"id\": 2, \"name\": \"Bob\"}]"}
    :post {:status 201
           :headers {"Content-Type" "application/json"}
           :body "{\"id\": 3, \"name\": \"Charlie\"}"}
    {:status 405
     :headers {"Content-Type" "text/plain"}
     :body "Method not allowed"}))

;; =============================================================================
;; DATABASE INTEGRATION
;; =============================================================================

;; Common database libraries:
;; - next.jdbc: Modern JDBC wrapper
;; - honeysql: SQL generation
;; - hugsql: SQL files with Clojure

;; Example with next.jdbc:
;; (require '[next.jdbc :as jdbc])

;; (def db-spec {:dbtype "postgresql"
;;               :dbname "myapp"
;;               :host "localhost"
;;               :user "user"
;;               :password "password"})

;; (defn get-users []
;;   (jdbc/execute! db-spec ["SELECT * FROM users"]))

;; =============================================================================
;; POPULAR WEB FRAMEWORKS
;; =============================================================================

;; 1. Ring + Compojure (traditional)
;; 2. Luminus (full-stack template)
;; 3. Pedestal (async, interceptor-based)
;; 4. Reitit (modern routing)
;; 5. Kit (modern full-stack)

;; =============================================================================
;; DEPLOYMENT PATTERNS
;; =============================================================================

;; Common deployment options:
;; 1. Uberjar with embedded Jetty
;; 2. Docker containers
;; 3. Heroku with Procfile
;; 4. AWS Lambda (with ring-aws-lambda-adapter)

;; =============================================================================
;; TESTING WEB APPS
;; =============================================================================

;; Testing handlers is easy - they're just functions!
;; (deftest test-hello-handler
;;   (let [response (hello-handler {:request-method :get :uri "/"})]
;;     (is (= 200 (:status response)))
;;     (is (= "text/html" (get-in response [:headers "Content-Type"])))))

;; Memory Bank Notes:
;; - Ring: requests and responses are maps
;; - Handlers: functions that transform request maps to response maps
;; - Middleware: functions that wrap handlers
;; - Compojure: routing library built on Ring
;; - Hiccup: HTML generation from Clojure data
;; - Everything is composable and testable
;; - Favor pure functions and immutable data
